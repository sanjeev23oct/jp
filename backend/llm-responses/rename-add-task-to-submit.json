{
  "prompt": "Rename Add task to Submit task",
  "response": {
    "html": "<div class=\"app-container\">\n  <header class=\"app-header\">\n    <h1>📝 Smart Task Manager</h1>\n    <p>Organize your day with style</p>\n  </header>\n\n  <main class=\"main-content\">\n    <div class=\"input-section\">\n      <div class=\"input-group\">\n        <input type=\"text\" id=\"taskInput\" placeholder=\"What needs to be done?\" class=\"task-input\">\n        <button id=\"addTaskBtn\" class=\"add-btn\">\n          <span class=\"btn-text\">Add Task</span>\n          <span class=\"btn-icon\">➕</span>\n        </button>\n      </div>\n    </div>\n\n    <div class=\"stats-section\">\n      <div class=\"stat-card\">\n        <div class=\"stat-number\" id=\"totalTasks\">0</div>\n        <div class=\"stat-label\">Total</div>\n      </div>\n      <div class=\"stat-card\">\n        <div class=\"stat-number\" id=\"pendingTasks\">0</div>\n        <div class=\"stat-label\">Pending</div>\n      </div>\n      <div class=\"stat-card\">\n        <div class=\"stat-number\" id=\"completedTasks\">0</div>\n        <div class=\"stat-label\">Completed</div>\n      </div>\n    </div>\n\n    <div class=\"filters-section\">\n      <button class=\"filter-btn active\" data-filter=\"all\">All</button>\n      <button class=\"filter-btn\" data-filter=\"pending\">Pending</button>\n      <button class=\"filter-btn\" data-filter=\"completed\">Completed</button>\n    </div>\n\n    <div class=\"tasks-section\">\n      <ul id=\"tasksList\" class=\"tasks-list\">\n        <!-- Tasks will be dynamically inserted here -->\n      </ul>\n    </div>\n  </main>\n\n  <div class=\"empty-state\" id=\"emptyState\">\n    <div class=\"empty-icon\">📋</div>\n    <h3>No tasks yet</h3>\n    <p>Add your first task to get started!</p>\n  </div>\n</div>",
    "css": ":root {\n  --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n  --success-color: #10b981;\n  --warning-color: #f59e0b;\n  --danger-color: #ef4444;\n  --bg-color: #f8fafc;\n  --card-bg: #ffffff;\n  --text-primary: #1e293b;\n  --text-secondary: #64748b;\n  --border-color: #e2e8f0;\n  --shadow: 0 10px 25px rgba(0, 0, 0, 0.1);\n  --shadow-sm: 0 2px 10px rgba(0, 0, 0, 0.05);\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  background: var(--bg-color);\n  color: var(--text-primary);\n  line-height: 1.6;\n  min-height: 100vh;\n  padding: 20px;\n}\n\n.app-container {\n  max-width: 800px;\n  margin: 0 auto;\n  animation: fadeIn 0.8s ease-out;\n}\n\n.app-header {\n  text-align: center;\n  margin-bottom: 48px;\n  padding: 32px 0;\n}\n\n.app-header h1 {\n  font-size: 3rem;\n  font-weight: 700;\n  background: var(--primary-gradient);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  margin-bottom: 8px;\n}\n\n.app-header p {\n  font-size: 1.2rem;\n  color: var(--text-secondary);\n  font-weight: 300;\n}\n\n.main-content {\n  background: var(--card-bg);\n  border-radius: 20px;\n  padding: 32px;\n  box-shadow: var(--shadow);\n  backdrop-filter: blur(10px);\n}\n\n.input-section {\n  margin-bottom: 32px;\n}\n\n.input-group {\n  display: flex;\n  gap: 12px;\n  align-items: stretch;\n}\n\n.task-input {\n  flex: 1;\n  padding: 16px 20px;\n  border: 2px solid var(--border-color);\n  border-radius: 12px;\n  font-size: 1rem;\n  transition: all 0.3s ease;\n  background: var(--bg-color);\n}\n\n.task-input:focus {\n  outline: none;\n  border-color: #667eea;\n  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n  transform: translateY(-2px);\n}\n\n.add-btn {\n  background: var(--primary-gradient);\n  color: white;\n  border: none;\n  border-radius: 12px;\n  padding: 16px 24px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  min-width: 120px;\n  justify-content: center;\n}\n\n.add-btn:hover {\n  transform: translateY(-2px);\n  box-shadow: var(--shadow);\n}\n\n.btn-icon {\n  display: none;\n}\n\n.stats-section {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 16px;\n  margin-bottom: 32px;\n}\n\n.stat-card {\n  background: var(--bg-color);\n  padding: 20px;\n  border-radius: 12px;\n  text-align: center;\n  border: 1px solid var(--border-color);\n  transition: transform 0.3s ease;\n}\n\n.stat-card:hover {\n  transform: translateY(-2px);\n}\n\n.stat-number {\n  font-size: 2rem;\n  font-weight: 700;\n  color: var(--text-primary);\n  margin-bottom: 4px;\n}\n\n.stat-label {\n  font-size: 0.875rem;\n  color: var(--text-secondary);\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.filters-section {\n  display: flex;\n  gap: 8px;\n  margin-bottom: 24px;\n  justify-content: center;\n}\n\n.filter-btn {\n  padding: 10px 20px;\n  border: 2px solid var(--border-color);\n  background: var(--bg-color);\n  border-radius: 25px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  font-weight: 500;\n  color: var(--text-secondary);\n}\n\n.filter-btn.active,\n.filter-btn:hover {\n  background: var(--primary-gradient);\n  color: white;\n  border-color: transparent;\n  transform: translateY(-1px);\n}\n\n.tasks-list {\n  list-style: none;\n  max-height: 400px;\n  overflow-y: auto;\n}\n\n.task-item {\n  background: var(--bg-color);\n  padding: 20px;\n  border-radius: 12px;\n  margin-bottom: 12px;\n  border: 1px solid var(--border-color);\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  transition: all 0.3s ease;\n  animation: slideIn 0.3s ease-out;\n}\n\n.task-item:hover {\n  transform: translateX(4px);\n  box-shadow: var(--shadow-sm);\n}\n\n.task-item.completed {\n  opacity: 0.7;\n  background: #f0fdf4;\n  border-color: #bbf7d0;\n}\n\n.task-checkbox {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  border: 2px solid var(--border-color);\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.3s ease;\n  flex-shrink: 0;\n}\n\n.task-checkbox.checked {\n  background: var(--success-color);\n  border-color: var(--success-color);\n  color: white;\n}\n\n.task-text {\n  flex: 1;\n  font-size: 1rem;\n  color: var(--text-primary);\n}\n\n.task-item.completed .task-text {\n  text-decoration: line-through;\n  color: var(--text-secondary);\n}\n\n.task-actions {\n  display: flex;\n  gap: 8px;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.task-item:hover .task-actions {\n  opacity: 1;\n}\n\n.delete-btn {\n  background: var(--danger-color);\n  color: white;\n  border: none;\n  width: 32px;\n  height: 32px;\n  border-radius: 8px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.3s ease;\n  font-size: 0.875rem;\n}\n\n.delete-btn:hover {\n  transform: scale(1.1);\n}\n\n.empty-state {\n  text-align: center;\n  padding: 60px 20px;\n  color: var(--text-secondary);\n  display: none;\n}\n\n.empty-state.show {\n  display: block;\n}\n\n.empty-icon {\n  font-size: 4rem;\n  margin-bottom: 16px;\n  opacity: 0.5;\n}\n\n.empty-state h3 {\n  font-size: 1.5rem;\n  margin-bottom: 8px;\n  color: var(--text-primary);\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideIn {\n  from {\n    opacity: 0;\n    transform: translateX(-20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@media (max-width: 768px) {\n  .app-header h1 {\n    font-size: 2.5rem;\n  }\n  \n  .main-content {\n    padding: 24px 20px;\n  }\n  \n  .input-group {\n    flex-direction: column;\n  }\n  \n  .btn-text {\n    display: none;\n  }\n  \n  .btn-icon {\n    display: block;\n    font-size: 1.2rem;\n  }\n  \n  .stats-section {\n    grid-template-columns: 1fr;\n    gap: 12px;\n  }\n  \n  .filters-section {\n    flex-wrap: wrap;\n  }\n  \n  .task-actions {\n    opacity: 1;\n  }\n}",
    "js": "class TaskManager {\n  constructor() {\n    this.dbName = 'TaskManagerDB';\n    this.dbVersion = 1;\n    this.storeName = 'tasks';\n    this.currentFilter = 'all';\n    this.init();\n  }\n\n  async init() {\n    await this.initDB();\n    await this.loadTasks();\n    this.setupEventListeners();\n    this.updateStats();\n  }\n\n  initDB() {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.dbVersion);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve();\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n        if (!db.objectStoreNames.contains(this.storeName)) {\n          const store = db.createObjectStore(this.storeName, { \n            keyPath: 'id', \n            autoIncrement: true \n          });\n          store.createIndex('completed', 'completed', { unique: false });\n          store.createIndex('createdAt', 'createdAt', { unique: false });\n        }\n      };\n    });\n  }\n\n  async addTask(text) {\n    if (!text.trim()) return;\n\n    const task = {\n      text: text.trim(),\n      completed: false,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db.transaction([this.storeName], 'readwrite');\n      const store = transaction.objectStore(this.storeName);\n      const request = store.add(task);\n\n      request.onsuccess = () => {\n        task.id = request.result;\n        this.renderTask(task);\n        this.updateStats();\n        resolve(task);\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async loadTasks() {\n    return new Promise((resolve, reject) => {\n      const transaction = this.db.transaction([this.storeName], 'readonly');\n      const store = transaction.objectStore(this.storeName);\n      const request = store.getAll();\n\n      request.onsuccess = () => {\n        const tasks = request.result;\n        if (tasks.length === 0) {\n          this.preloadSampleTasks();\n        } else {\n          this.renderTasks(tasks);\n        }\n        resolve(tasks);\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async preloadSampleTasks() {\n    const sampleTasks = [\n      'Complete project proposal',\n      'Schedule team meeting',\n      'Review design mockups',\n      'Update documentation',\n      'Prepare presentation slides'\n    ];\n\n    for (const text of sampleTasks) {\n      await this.addTask(text);\n    }\n  }\n\n  async updateTask(id, updates) {\n    return new Promise((resolve, reject) => {\n      const transaction = this.db.transaction([this.storeName], 'readwrite');\n      const store = transaction.objectStore(this.storeName);\n      const getRequest = store.get(id);\n\n      getRequest.onsuccess = () => {\n        const task = getRequest.result;\n        if (task) {\n          Object.assign(task, updates, { updatedAt: new Date().toISOString() });\n          const putRequest = store.put(task);\n          putRequest.onsuccess = () => {\n            this.updateTaskInDOM(id, task);\n            this.updateStats();\n            resolve(task);\n          };\n          putRequest.onerror = () => reject(putRequest.error);\n        }\n      };\n      getRequest.onerror = () => reject(getRequest.error);\n    });\n  }\n\n  async deleteTask(id) {\n    return new Promise((resolve, reject) => {\n      const transaction = this.db.transaction([this.storeName], 'readwrite');\n      const store = transaction.objectStore(this.storeName);\n      const request = store.delete(id);\n\n      request.onsuccess = () => {\n        this.removeTaskFromDOM(id);\n        this.updateStats();\n        resolve();\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  renderTasks(tasks) {\n    const tasksList = document.getElementById('tasksList');\n    tasksList.innerHTML = '';\n    \n    const filteredTasks = this.filterTasks(tasks);\n    filteredTasks.forEach(task => this.renderTask(task));\n    \n    this.toggleEmptyState();\n  }\n\n  renderTask(task) {\n    const tasksList = document.getElementById('tasksList');\n    const taskElement = document.createElement('li');\n    taskElement.className = `task-item ${task.completed ? 'completed' : ''}`;\n    taskElement.dataset.id = task.id;\n\n    taskElement.innerHTML = `\n      <div class=\"task-checkbox ${task.completed ? 'checked' : ''}\" data-id=\"${task.id}\">\n        ${task.completed ? '✓' : ''}\n      </div>\n      <div class=\"task-text\">${this.escapeHtml(task.text)}</div>\n      <div class=\"task-actions\">\n        <button class=\"delete-btn\" data-id=\"${task.id}\" title=\"Delete task\">🗑️</button>\n      </div>\n    `;\n\n    tasksList.appendChild(taskElement);\n    this.toggleEmptyState();\n  }\n\n  updateTaskInDOM(id, task) {\n    const taskElement = document.querySelector(`.task-item[data-id=\"${id}\"]`);\n    if (taskElement) {\n      taskElement.className = `task-item ${task.completed ? 'completed' : ''}`;\n      const checkbox = taskElement.querySelector('.task-checkbox');\n      const text = taskElement.querySelector('.task-text');\n      \n      checkbox.className = `task-checkbox ${task.completed ? 'checked' : ''}`;\n      checkbox.innerHTML = task.completed ? '✓' : '';\n      text.innerHTML = this.escapeHtml(task.text);\n      \n      if (this.currentFilter !== 'all' && !this.shouldShowTask(task)) {\n        taskElement.style.display = 'none';\n      } else {\n        taskElement.style.display = 'flex';\n      }\n    }\n  }\n\n  removeTaskFromDOM(id) {\n    const taskElement = document.querySelector(`.task-item[data-id=\"${id}\"]`);\n    if (taskElement) {\n      taskElement.style.animation = 'slideIn 0.3s ease-out reverse';\n      setTimeout(() => {\n        taskElement.remove();\n        this.toggleEmptyState();\n      }, 300);\n    }\n  }\n\n  filterTasks(tasks) {\n    return tasks.filter(task => this.shouldShowTask(task));\n  }\n\n  shouldShowTask(task) {\n    switch (this.currentFilter) {\n      case 'completed':\n        return task.completed;\n      case 'pending':\n        return !task.completed;\n      default:\n        return true;\n    }\n  }\n\n  toggleEmptyState() {\n    const emptyState = document.getElementById('emptyState');\n    const tasksList = document.getElementById('tasksList');\n    const visibleTasks = tasksList.querySelectorAll('.task-item[style*=\"display: flex\"], .task-item:not([style])');\n    \n    if (visibleTasks.length === 0) {\n      emptyState.classList.add('show');\n    } else {\n      emptyState.classList.remove('show');\n    }\n  }\n\n  updateStats() {\n    const transaction = this.db.transaction([this.storeName], 'readonly');\n    const store = transaction.objectStore(this.storeName);\n    const request = store.getAll();\n\n    request.onsuccess = () => {\n      const tasks = request.result;\n      const total = tasks.length;\n      const completed = tasks.filter(task => task.completed).length;\n      const pending = total - completed;\n\n      document.getElementById('totalTasks').textContent = total;\n      document.getElementById('pendingTasks').textContent = pending;\n      document.getElementById('completedTasks').textContent = completed;\n    };\n  }\n\n  setupEventListeners() {\n    const taskInput = document.getElementById('taskInput');\n    const addTaskBtn = document.getElementById('addTaskBtn');\n    const tasksList = document.getElementById('tasksList');\n    const filterBtns = document.querySelectorAll('.filter-btn');\n\n    addTaskBtn.addEventListener('click', () => {\n      this.addTask(taskInput.value);\n      taskInput.value = '';\n      taskInput.focus();\n    });\n\n    taskInput.addEventListener('keypress', (e) => {\n      if (e.key === 'Enter') {\n        this.addTask(taskInput.value);\n        taskInput.value = '';\n      }\n    });\n\n    tasksList.addEventListener('click', (e) => {\n      const target = e.target;\n      \n      if (target.classList.contains('task-checkbox')) {\n        const id = parseInt(target.dataset.id);\n        const taskElement = target.closest('.task-item');\n        const completed = !taskElement.classList.contains('completed');\n        this.updateTask(id, { completed });\n      }\n      \n      if (target.classList.contains('delete-btn')) {\n        const id = parseInt(target.dataset.id);\n        this.deleteTask(id);\n      }\n    });\n\n    filterBtns.forEach(btn => {\n      btn.addEventListener('click', () => {\n        filterBtns.forEach(b => b.classList.remove('active'));\n        btn.classList.add('active');\n        this.currentFilter = btn.dataset.filter;\n        this.loadTasks();\n      });\n    });\n  }\n\n  escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  new TaskManager();\n});",
    "explanation": "Created a beautiful, modern task manager with IndexedDB persistence, gradient design, smooth animations, task filtering, statistics dashboard, and responsive layout. Pre-populated with sample tasks to demonstrate functionality.",
    "suggestions": [
      "Add due dates and priority levels to tasks",
      "Implement drag-and-drop task reordering",
      "Add categories or tags for better organization",
      "Include task search functionality",
      "Add dark/light theme toggle",
      "Implement task sharing or export features"
    ]
  },
  "timestamp": "2025-10-01T08:21:14.044Z",
  "metadata": {
    "htmlLength": 1612,
    "cssLength": 5890,
    "jsLength": 8762
  }
}